MongoDB is a NoSQL database developed by MongoDB Inc. It is designed for scalability, high performance, and ease of development. Unlike traditional relational databases (SQL), MongoDB stores data in flexible, JSON-like documents, which can vary in structure.

MongoDB over SQL:
--------------------
1.Schema Flexibility: Built with horizontal scalability in mind. It supports sharding, which allows the database to be distributed across multiple servers, making it easier to scale out as the application grows.
2.Data Model: Stores data in BSON (binary JSON) format, allowing for the embedding of related data within a single document. This can lead to more natural and efficient data retrieval.
3.Performance: Optimized for read and write operations, particularly for large volumes of unstructured data. It can efficiently handle a high volume of concurrent read and write requests.


Documents-The basic unit of data in MongoDB.Analogous to a row in a SQL database.Stored in BSON (Binary JSON) format.
Collection-A group of MongoDB documents.Analogous to a table in a SQL database.
Database- A container for collections.Analogous to a database in a SQL system.Each database has its own set of files on the file system.


Optional Validation Schema
-----------------------------
In MongoDB, you can enforce optional validation schemas using the built-in schema validation feature. This allows you to define rules for the structure of documents in a collection. Validation can be applied to new documents and updates, ensuring data consistency and integrity.
Setting Up a Validation Schema
To set up a validation schema, you use the '$jsonSchema' operator within the validator option when creating a collection or modifying an existing one.

CRUD OPERATION
------------------

In MongoDB, documents can be inserted into a collection using the insertOne() and insertMany() methods. If the specified collection does not already exist, MongoDB will automatically create it before inserting the documents.

insertOne()
The insertOne() method is used to insert a single document into a collection. Here’s the syntax:
db.<Collection>.insertOne(<document>)
eg:: 
db.users.insertOne({
  name: "John Doe",
  email: "john.doe@example.com",
  age: 30,
  address: {
    street: "123 Main St",
    city: "Anytown",
    state: "CA",
    postalCode: "12345"
  }
})

insertMany()
The insertMany() method is used to insert multiple documents into a collection in a single operation. Here’s the syntax:
db.<Collection>.insertMany(<document>,<document>)

FIND Query Operator
db.<collection>.find({field:value})

eg:
db.users.find({state:barbar})

$in: operator allows us to select all the documents that have a field value to any of the values specified in the array.
db.collection.find({field:{$in:[<value>,<value>,....]}})

Comparison Operator
---------------------
$gt,$gte,$lt,$lte
{field:{$operator:<value>}}

Query Elements in array
---------------------------
The $elemMatch operator in MongoDB is used to match documents that contain an array field with at least one element that matches all the specified query criteria.

{ <arrayField>: { $elemMatch: { <criteria1>, <criteria2>, ... } } }
db.students.find({
  grades: {
    $elemMatch: {
      subject: "Math",
      score: { $gt: 80 }
    }
  }
})


`$and` Operator
The $and operator is used to join query clauses with a logical AND. It returns documents that match all the specified conditions.
{ $and: [ { <condition1> }, { <condition2> }, ... ] }
db.products.find({
  $and: [
    { inStock: true },
    { price: { $lt: 20 } }
  ]
})


`$or` Operator
The $or operator is used to join query clauses with a logical OR. It returns documents that match at least one of the specified conditions.
{ $or: [ { <condition1> }, { <condition2> }, ... ] }
db.products.find({
  $or: [
    { inStock: true },
    { price: { $lt: 20 } }
  ]
})

REPLACE AND DELETE DOCUMENTS
--------------------------------
The replaceOne() method in MongoDB is used to replace a single document within a collection that matches a specified filter. Unlike updateOne(), which can update specific fields of a document, replaceOne() replaces the entire document with a new one.
db.collection.replaceOne(
   <filter>,
   <replacement>,
   <options>
)
<filter>: A query that matches the document to replace.
<replacement>: The new document that will replace the existing matched document.
<options>: Optional parameters (e.g., upsert).

eg::
db.users.replaceOne(
  { username: "johndoe" },  // Filter
  {                        // Replacement Document
    "username": "johndoe",
    "email": "john.doe@example.com",
    "age": 31,
    "address": {
      "street": "456 Elm St",
      "city": "Othertown",
      "state": "NY",
      "postalCode": "54321"
    }
  }
)

The UpdateOne() is used to update the field of a particular document with new value or set the old value with the modified value.
db.<collection>.updateOne(<filter>,<update>,<optional>)

$set-is used to modify an existing field or insert a new field in the document
$push -insert an element in the array
upsert-if the filter does not match with the existing document it just insert a new document and if the filter condition matches it updates the existing document.

db.collection.updateOne(
  { _id: 1 },
  {
    $set: { name: "John Doe" },
    $push: { scores: 89 }
  },
  { upsert: true }
)
Searches for a document with _id 1.
If the document exists, it updates the name field to "John Doe" and appends 89 to the scores array.
If the document does not exist, it creates a new document with _id 1, sets the name field to "John Doe", and initializes the scores array with 89


findandModify() method to update and return the document that matches the query field and we set the new option to true to ensure that the updated document returns.

db.users.findAndModify({
   query: { _id: 1 },
   update: { $set: { age: 30 } },
   new: false
})

updateMany() method updates multiple documents
db.collection.updateMany(
   <filter>,
   <update>,
  <options>
)
db.users.updateMany(
   { status: "inactive" },
   { $set: { status: "active" } }
)

NOTE ::updateMany() does not rollback in any failure if all the documents are not updated

deleteOne() and deleteMany()
deleteOne()
The deleteOne() method is used to delete a single document that matches a specified filter. If multiple documents match the filter, only the first one encountered will be deleted.

db.collection.deleteOne(
   <filter>,
   <options>
)

deleteMany()
The deleteMany() method is used to delete multiple documents that match a specified filter.
db.collection.deleteMany(
   <filter>,
   <options>
)
