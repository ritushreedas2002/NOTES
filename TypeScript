Main Functionality of trypeScript is Static checking
Static Checking means analyzing your code and checking you might be running into potential error without running the code and getting errors at runtime.

---in terminal---
Global install npm install -g typescript
tsc intro.js

Types available in typescript
--------------------------------
let variableName:type=value

NOTE: there is no int or float in js
let userID:number=33.4
or
let userId:number=33

/any refers to any datatype.It does not allow type checked
NoImplicitAny -is writtern in ts.config file that does not allow us to perform 'any'

function addtwo(num:number){
    //return num+2;
    return "hitest"
}
let ans=addtwo(4);

BOTH ARE ELIGIBLE as we have not defined the return type of the function

const =(num:number):number=>{
    return num+2;
}

const error=(error:string):void{ //function return nothing so void
    console.log(error)
}

Type alias

type User={
    name:string,
    active:boolean
}

function createUser(user:User):User{
    return {name:"",active:true};
}


createUser({name:"hitesh","active":false})

//Array
const superheroes:string[]=[];
superheroes.push("Spider");

const arr:Array<Number>=[];

type User={
    name:string,
    isactive:boolean
}
const ar:User[]=[]

Union
------
combination of two or more types 
let score :number|boolean|string=33


//readonly
type User={
    readonly _id:string
    name:string,
    active:boolean.
    creditdetails?:string  //? indicates optional 
}
let myuser:User={
    _id:"12345",
    name:"ritu",
    active:true
}
myuser._id="34567" //error

tuple--order and type pf the data is maintained

let user:[string,number,boolean];
user=["hello",1,true];
NOTE::::Typescript rray push metod cannot catch the tuple type array
user.push('hello')

---Enum---
Enums in TypeScript are a useful feature that allow developers to define a set of named constants. These named constants can then be used to represent a finite set of possible values
enum Seat{
    AISLE="aisle",
    WINDOW,
    MIDDLE
}
const choice=Seat.AISLE;

INTERFACES
----------

interface LabeledValue {
  label: string;
}
 
function printLabel(labeledObj: LabeledValue) {
  console.log(labeledObj.label);
}
 
let myObj = { size: 10, label: "Size 10 Object" };
printLabel(myObj);
The interface LabeledValue is a name we can now use to describe the requirement in the previous example. It still represents having a single property called label that is of type string. Notice we didn’t have to explicitly say that the object we pass to printLabel implements this interface like we might have to in other languages. Here, it’s only the shape that matters. If the object we pass to the function meets the requirements listed, then it’s allowed.

-----------------GENERICS-------------------------------
import { ReactNode } from "react";

const function1=(input:String)=>{
    return [input];
}
function1(2);
//now I want that take input as string and return a string array or take input as number and return a number array

//for this we do generic function when input type and the return type are varying but their relation type is constant

const function2=<T>(input:T):T[]=>{
    return [input];
}
function2(2);
function("2");
//T indicates any datatype possible


multiple parameters

const function3=<T>(input:T, input2:T):T[]=>{
    return [input, input2];
}
function3(2,3);

const function3=<T>(input:T, input2:T[])=>{
    input2.findIndex((element)=>element===input);
}
const arr=[1,2,3,4]
function3(2,arr)

//for multiple parameters we can also use different datatypes
const function=(input:String,input2:number):[string,number]=>{
    return [input,input2];
}
const function=<T,U>(input:T,input2:U):[T,U]=>{
    return [input,input2];
}
function(2,"String");

// suppose T only supports string and number
const function=<T extends string | number>(input:T):T=>{
    return input;
}
function(2);




//React example

const function=()=>{
    const[selectedtheme,setselectedtheme]=useState("light");
    const Options=["light","dark","system"];
    return {
        <function2 selectedtheme={selectedtheme} options={Options} onThemeClick={(option)=>setselectedTheme(option)} />
    }
}

//selectedtheme will be the same type of that type of the options

type ThemeOptionsProps<T>={
    selectedtheme:T,
    options:T[],
    onThemeClick:(option:T)=>void  //taking type option and return void(nothing)
}
const function2=<T>({selectedtheme,options,onThemeClick}:ThemeOptionsProps<T>)=>{
    return {
        <div>
        {
            options.map((option)=>{
                return <button onClick={()=>onThemeClick(option)} className={selectedtheme===option?"font-bold":"font-serif"}>{option as ReactNode}</button>
            })//ass option can be string or number or anything but needs to be reactNode
        }
        </div>
    }
}

const function=(props:{background:String})=>{
    const{background}=props;
    return (
        <div>
            <Hello background="red"/>
        </div>
    )
}
or
const function=({background}:{background:String})=>{}

CSS Properties
-----------------
export default Home(){
    return (
        <Button style={{
            background:"blue",
            text:"white",
            padding:"1rem 2rem"
        }}>
    )
}

type ButtonProps={
    style:React.CssProperties
}
export default function Button=({style}:ButtonProps)=>{
    return <button style={style}>Click me</button>
}
