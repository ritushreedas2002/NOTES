Websocket provide the web browser to communicate with the web server and the client continously without the need to close the connection after each exchange. This makes a real-time communication.

HTTP -a web development communication protocol.It is a stateless protocol that does not save the state of the client.
HTTP---->REST APIS(Representational State Transfer)---->POST,GET,PUT,DELETE
CLIENT-------------------(POST)--------->SERVER
<----------------------(SUCESS with code 200)----SERVER   and then the connection is closed.


WEBSOCKET
client-----------------(handshake request)-------------->Server
<----------------------------(Sucess)------------Server   as the connection is established the connection is ON forever untill you close the connection. So the client can post the data, delete data and server can get the data.

HTTP Long Polling- The connection wil fallback to HTTP long-polling in case the socket connection cannot be established.

socket.io is a library that enables real-time, bidirectional, and event-based communication between web clients and servers.

IN SERVER SIDE
--------------------
npm install socket.io
server>server.js

const { createServer } = require("http");
const {Server} =require('socket.io'); //Server is a class provided by the socket.io module, which is used to create a new Socket.IO server instance

const httpServer = createServer(); 
const socket = new Server(httpServer, {  //new Server(httpServer, {}) creates a new instance of a Socket.IO server.The first argument httpServer attaches the Socket.IO server to the HTTP server, enabling the Socket.IO server to use the same server to handle WebSocket connections.
  cors: {
    origin: "http://localhost:5173",
  },
});

socket.on("connection",(socket)=>{ //evernt name with a callback function
     socket.emit("message","HELLO"); //send a hello message of event name "Message" to the client

    socket.on("client",(data)=>{  //to accept the client event message
        console.log(data);//"From client" message comes from the client
    })
}) 


httpServer.listen(3000, () => {
  console.log("Server is running!");
});


IN CLIENT SIDE
---------------------
npm install socket.io-client
client>index.js

const socket=io("http://localhost:3000"); //to establish connection with the server

socket.on('connect',(resonse)=>{
console.log(response);
});

socket.on("message",(data)=>{ //accept the message event from the server
  console.log(data); //"HELLO" FROM THE SERVER

  socket.emit("client","From client");//send the message to the server in client event message
})
