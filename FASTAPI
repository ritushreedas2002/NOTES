FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.7+ based on standard Python type hints 

Key Features:

Performance:
FastAPI is designed to be one of the fastest web frameworks available. It achieves this by leveraging asynchronous programming and standard Python type hints.

Ease of Use:
It provides automatic interactive API documentation (Swagger UI and ReDoc) generated from the API's endpoints and data models.

Data Validation and Serialization:
FastAPI uses Pydantic for data validation and serialization. This ensures that the data you receive is in the expected format and type, reducing bugs and errors.

Dependency Injection:
FastAPI provides a powerful dependency injection system that allows you to manage dependencies in a clean and efficient way.

Asynchronous Capabilities:
FastAPI supports asynchronous request handling, which can lead to significant performance improvements for I/O-bound operations.

Uvicorn:
Uvicorn is a web server. It handles network communication - receiving requests from client applications such as users' browsers and sending responses to them


MONOLITH ARCHITECTURE
================================
Characteristics of Monolithic Architecture:

Single Codebase: All functionality is contained within a single application.
Shared Database: One database is used for all data storage needs.
Single Deployment Unit: The entire application is deployed as one unit.
Tightly Coupled: Components are often interdependent.


disadvantages
1.Scalability Issues (if in authentication i want to scale i cannot scale that individually I need to scale the whole unit)
2.Deployment Issues
3.TechStack issues

+--------------------------------------------------+
|                 Monolithic Application           |
| +--------------------------------------------+  |
| |               User Interface               |  |
| +--------------------------------------------+  |
|                      |                          |
| +--------------------------------------------+  |
| |               Business Logic               |  |
| | +----------------+ +-------------------+   |  |
| | | User Module    | | Product Module    |   |  |
| | +----------------+ +-------------------+   |  |
| | +----------------+ +-------------------+   |  |
| | | Order Module   | | Payment Module    |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
|                      |                          |
| +--------------------------------------------+  |
| |               Data Access Layer            |  |
| +--------------------------------------------+  |
|                      |                          |
| +--------------------------------------------+  |
| |               Single Database              |  |
| +--------------------------------------------+  |
+--------------------------------------------------+



MICROSERVICES ARCHITECTURE
============================

+--------------------------------------------------+
|              API Gateway / Load Balancer         |
+--------------------------------------------------+
        |           |           |           |
        v           v           v           v
+-------------+ +----------+ +----------+ +----------+
| User        | | Product  | | Order    | | Payment  |
| Microservice| | Micro-   | | Micro-   | | Micro-   |
|             | | service  | | service  | | service  |
| +---------+ | |+-------+ | |+-------+ | |+-------+ |
| |Business | | ||Busi-  | | ||Busi-  | | ||Busi-  | |
| |Logic    | | ||ness   | | ||ness   | | ||ness   | |
| +---------+ | ||Logic  | | ||Logic  | | ||Logic  | |
| +---------+ | |+-------+ | |+-------+ | |+-------+ |
| |Data     | | |+-------+ | |+-------+ | |+-------+ |
| |Access   | | ||Data   | | ||Data   | | ||Data   | |
| +---------+ | ||Access | | ||Access | | ||Access | |
|      |      | |+-------+ | |+-------+ | |+-------+ |
|      v      | |    |     | |    |     | |    |     |
| +---------+ | |+-------+ | |+-------+ | |+-------+ |
| |User DB  | | ||Product| | ||Order  | | ||Payment| |
| |         | | ||  DB   | | ||  DB   | | ||  DB   | |
| +---------+ | |+-------+ | |+-------+ | |+-------+ |
+-------------+ +----------+ +----------+ +----------+



CLIENT - SERVER COMMUNICATION
-----------------------------------
------------------------------------


[Client] <---> [Load Balancer]
                    |
                    v
         +----------------------+
         |    Application Server|
         |  +----------------+  |
         |  |    Middleware  |  |
         |  +----------------+  |
         |          |           |
         |          v           |
         |  +----------------+  |
         |  |    Routes      |  |
         |  +----------------+  |
         |          |           |
         |          v           |
         |  +----------------+  |
         |  |  Controllers   |  |
         |  +----------------+  |
         |          |           |
         |          v           |
         |  +----------------+  |
         |  |   Services     |  |
         |  +----------------+  |
         |          |           |
         |          v           |
         |  +----------------+  |
         |  |   Data Access  |  |
         |  +----------------+  |
         +----------------------+
                    |
                    v
             [Database]


WHAT IS A MIDDLEWARE? 
A middleware is a thing ( that can be a function or program or multiple things(etc) ) that lies in between or middle of two nodes or layers that is used for requesting objects, responding to the objects, apply checks.
+----------------------------------+
|           Middleware             |
| +------------------------------+ |
| |      Request Pipeline        | |
| |                              | |
| | +--------------------------+ | |
| | |   Authentication         | | |
| | +--------------------------+ | |
| |            |                 | |
| |            v                 | |
| | +--------------------------+ | |
| | |   Logging                | | |
| | +--------------------------+ | |
| |            |                 | |
| |            v                 | |
| | +--------------------------+ | |
| | |   Request Parsing        | | |
| | +--------------------------+ | |
| |            |                 | |
| |            v                 | |
| | +--------------------------+ | |
| | |   Error Handling         | | |
| | +--------------------------+ | |
| |            |                 | |
| |            v                 | |
| |     (Next Middleware or      | |
| |        Route Handler)        | |
| +------------------------------+ |
+----------------------------------+
              |
              v
           Routes



+----------------------------------+
|           Controller             |
| +------------------------------+ |
| | - Handle HTTP requests       | |
| | - Validate input             | |
| | - Call appropriate services  | |
| | - Format and send responses  | |
| |                              | |
| | +-------------------------+  | |
| | | getUserById(id)         |  | |
| | | createUser(userData)    |  | |
| | | updateUser(id, userData)|  | |
| | | deleteUser(id)          |  | |
| | +-------------------------+  | |
| +------------------------------+ |
+----------------------------------+
              |
              v
           Services

+----------------------------------+
|            Service               |
| +------------------------------+ |
| | - Implement business logic   | |
| | - Coordinate data access     | |
| | - Manage transactions        | |
| | - Handle complex operations  | |
| |                              | |
| | +-------------------------+  | |
| | | findUserById(id)        |  | |
| | | createNewUser(userData) |  | |
| | | updateUserDetails(user) |  | |
| | | deleteUserAccount(id)   |  | |
| | +-------------------------+  | |
| +------------------------------+ |
+----------------------------------+
              |
              v
         Data Access Layer


+----------------------------------+
|              DTO                 |
| +------------------------------+ |
| | - Define data structure      | |
| | - Used for data transfer     | |
| |                              | |
| | +-------------------------+  | |
| | | UserDTO                 |  | |
| | | - id: number            |  | |
| | | - username: string      |  | |
| | | - email: string         |  | |
| | | - createdAt: Date       |  | |
| | +-------------------------+  | |
| +------------------------------+ |
+----------------------------------+


The whole client-server connection
-------------------------------------


+------------------------+
|        Client          |
| (Browser/Mobile App)   |
+------------------------+
           |
           | HTTP/HTTPS
           v
+------------------------+
|     Load Balancer      |
+------------------------+
           |
           v
+--------------------------------------------------+
|                 Application Server               |
| +--------------------------------------------+  |
| |               Middleware                   |  |----------------->framework level middleware example-->CORS
| | +----------------+ +-------------------+   |  |
| | | Authentication | | Request Parsing   |   |  |
| | +----------------+ +-------------------+   |  |
| | +----------------+ +-------------------+   |  |
| | |    Logging     | |  Error Handling   |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
|                      |                          |
|                      v                          |
| +--------------------------------------------+  |
| |                 Routes                     |  |
| | +----------------+ +-------------------+   |  |
| | |   /api/users   | |   /api/products   |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
|                      |                          |----------------->here middleware can be involved
|                      v                          |
| +--------------------------------------------+  |
| |              Controllers                   |  |
| | +----------------+ +-------------------+   |  |
| | | UserController | | ProductController |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
|                      |                          |------------------>between controllers and next layer middleware can be involved
|         +------------+------------+             |
|         |                         |             |
|         v                         v             |
| +----------------+      +-------------------+   |
| |      DTOs      |      |     Services      |   |
| | +------------+ |      | +---------------+ |   |
| | |  UserDTO   | |      | | UserService   | |   |
| | +------------+ | <--> | +---------------+ |   |
| | +------------+ |      | +---------------+ |   |
| | | ProductDTO | |      | | ProductService| |   |
| | +------------+ |      | +---------------+ |   |
| +----------------+      +-------------------+   |
|                                 |               |
|                                 v               |
| +--------------------------------------------+  |
| |            Data Access Layer               |  |
| | +----------------+ +-------------------+   |  |
| | |   UserRepo     | |   ProductRepo     |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
|                      |                          |
|                      v                          |
| +--------------------------------------------+  |
| |               Schemas                      |  |
| | +----------------+ +-------------------+   |  |
| | |   UserSchema   | |  ProductSchema    |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
+--------------------------------------------------+
                      |
                      v
+--------------------------------------------------+
|                   Database                       |
| +--------------------------------------------+  |
| |              Data Storage                  |  |
| | +----------------+ +-------------------+   |  |
| | |  Users Table   | |  Products Table   |   |  |
| | +----------------+ +-------------------+   |  |
| +--------------------------------------------+  |
+--------------------------------------------------+

WHAT IS A SESSION
---------------------
client-----------------------------------------------authentication success----------------------> server stores the session
now when client makes subsequent requests it stores it checks the sessions and provides multiple response

Disadvantage
---------------
when there is multiple client it becomes hectic to store the so many sesions in teh server so we instead to reduce the load from the server we switch to JWT tokens.

JWT tokens(stateless)
-------------
JWT token contains header , payload and the signature. Header and Payload are public but signature it private
header->which  algorithm you are  using-->HS256
payload->your data
Best case of JWT tokens is authorisation
------------------------------------------
Authentication-->registration
Authorization-->(resource access define)

how we securely stored JWT  token on client side
----------------------------------------------
u can store in localStorage, cookies (flags on = http)

client=============>take my info==============
<===================================token=====

------------------------------------------------------------------------------------------------------------------------------------------------
Installation process
------------------------
Sure, let's break down each step and explain their meaning and necessity:

1. python -m venv venv
Meaning:

This command uses the venv module to create a virtual environment in a directory named venv.
Why it's required:

A virtual environment is an isolated environment for Python projects. It allows you to manage dependencies for different projects separately, avoiding conflicts between packages needed for different projects.
2. .\venv\Scripts\activate
Meaning:

This command activates the virtual environment on Windows. For macOS/Linux, the command would be source venv/bin/activate.
Why it's required:

Activating the virtual environment ensures that any subsequent Python commands (like installing packages) are run within this isolated environment. This way, the dependencies are installed only in this environment and not globally.
3. pip install fastapi uvicorn
Meaning:

This command installs the fastapi and uvicorn packages using pip, the Python package installer.
Why it's required:

FastAPI is a modern, fast (high-performance), web framework for building APIs with Python 3.6+ based on standard Python type hints.
Uvicorn is an ASGI server implementation that is commonly used to run FastAPI applications. It is lightweight and efficient, making it ideal for serving web applications.
4. pip freeze > requirements.txt
Meaning:

This command lists all the installed packages in the current environment along with their versions and writes them to a file named requirements.txt.
Why it's required:

The requirements.txt file is a common way to specify dependencies for a Python project. It allows others (or future you) to install the exact same dependencies using pip install -r requirements.txt. This ensures that the project environment can be replicated exactly, avoiding issues with differing package versions.





-------------------------------------------------------------------------------------------------------------------------------------------
in ques1.py
-------------
from fastapi import FastAPI

app=FastAPI()

students={
    1:{"name":"Alice","age":25},
}
@app.get("/")
def index():
    return {"message":"Hello, World"}

@app.get("/get-student/{student_id}")  //dynamic path according to each student details
def get_student(student_id:int):
    return students[student_id]



in terminal
--------------
for running uvicorn ques1:app --reload  //--reload the page everytime we make changes

>>Will watch for changes in these directories: ['C:\\Users\\User\\Desktop\\python']
>>INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)

 http://127.0.0.1:8000 url return "hello world" --> http://127.0.0.1:8000/docs
 http://127.0.0.1:8000/get_student/1-->gives the first student details

----------------------------------------------------------------------------
Path parameter
from fastapi import Path
def get_student(student_id:int=Path(...,description="The ID of the student you want to view",gt=0,lt=3)):
    return students[student_id]

#Path is used to add constraints to the parameters. In this case, we are specifying that the student_id parameter must be an integer between 1 and 2. If the user tries to access a student with an ID outside this range, 
they will receive an error message. This helps to ensure that the API is used correctly and securely. (...) is used that suppose if i give the route/get_student then the description will return.

Query Parameter
Query parameters are another way to pass information to an API endpoint. They are similar to path parameters, but they are not part of the URL path. Instead, they are added to the end of the URL as key-value pairs, separated by a question mark (?). For example, in the URL /get-student?student_id=1, the query parameter is student_id=1.
/student?student_id=1 passed to the backend as a query parameter

@app.get("/get-by-name")
def get_student(name :str):
    for i in students:
        if students[i]["name"]==name:
            return students[i]
    
    return {"Data":"Not Found"}
#In this example, the get_student endpoint takes a query parameter called name. The user can pass the name of

------For making Optional---------
from typing import Optional
@app.get("/get-by-name")
def get_student(name :Optional[str]=None):
    for i in students:
        if students[i]["name"]==name:
            return students[i]
    
    return {"Data":"Not Found"}

suppose there are many query parameters
def get_student(*,name :Optional[str]=None,text:int):
* implies now we can have default or optional query parameter
# * is used to specify that all the parameters after it are keyword-only arguments. This means that the user must specify the name of the parameter when calling the endpoint. In this case, the name parameter is keyword-only, while the test parameter is not. This allows for more flexibility in how the parameters are passed to the endpoint.
The * symbol indicates that all the parameters following it (name and test in this case) are keyword-only arguments.
name: Optional[str] = None: name is an optional parameter that defaults to None if not provided.
test: int: test is a required parameter.

Why use *:
Enforcing Keyword-Only Arguments: It ensures that when you call this endpoint, you must use keyword arguments. For example, you must call the endpoint like this: /get-by-name?name=John Doe&test=123.

Combining Query Parameter and path parameter
--------------------------------------------
@app.get("/get-by-name/{student_id}")
def get_student(*,student_id:int,name :Optional[str]=None,test:int):

POST METHOD AND REQUEST BODY
------------------------------

from pydantic import BaseModel
class Student(BaseModel):
    name:str
    age:int

@app.post("/create-student/{student_id}")
def create_student(student_id:int,student:Student): #student is an object of Student class which is a pydantic model which the user has to pass in the body of the request
    if student_id in students:
        return {"Error":"Student Exists"}
    students[student_id]=student
    return students[student_id]

PUT METHOD
--------------
class updateStudent(BaseModel):
    name:Optional[str]=None
    age:Optional[int]=None


@app.put("/update-student/{student_id}")
def update_student(student_id:int,student:updateStudent):
    if student_id not in students:
        return {"Error":"Student Does not Exist"}
    if student.name!=None:
        students[student_id]["name"]=student.name
    if student.age!=None:
        students[student_id]["age"]=student.age
    return students[student_id]

DELETE METHOD
-------------
@app.delete("/delete-student/{student_id}")
def delete_student(student_id:int):
    if student_id not in students:
        return {"Error":"Student Does not Exist"}
    del students[student_id]
    return {"Message":"Student Deleted Successfully"}





------------------------------CONNECTION WITH MONGODB---------------------------------------------------------------
cd fastapi
python3 -venv venv ///set environment in our folder

then in terminal --source venv/bin/activate
install all dependencies pip install fastapi uvicorn pymongo

Go to atlas and in connect select python -->python -m pip install "python[srv]"

configuration.py
=================
from pymongo.mongo_client import MongoClient
from pymongo.server_api import ServerApi

uri = "mongodb+srv://admin-ritushree:<password>@cluster0.s6k4ce2.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0"

# Create a new client and connect to the server
client = MongoClient(uri, server_api=ServerApi('1'))

db=client.todo_db
collection=db["todo_data]

>databse>model.py
=====================
from pydantic import BaseModel //pydantic is used to validate our data that we will store in our database or say serialisation 
//serialisation suppose from client i got {a:1,b:2} now in backend i will store b:2 and send th eresponse as a:1
from datetime import datetime


class todo(BaseModel):
    title:str,
    description:str,
    is_completed:bool=false,//default alue is false
    is_deleted:bool=false
    updated_at:int=int(datetime.timestamp(datetime.now()))
    creation:int=int(datetime.timestamp(datetime.now()))

>database>schemas.py
--------------------
//we will give all the data from the documents and convert into the dictionary objects
def individual_data(todo):
    return {
        "id":str(todo["_id"]),
        "title":todo["title"],
        "description":todo["description"],
        "status":todo["is_completed"]
    }

def all_tasks(todos):
    return [individual_data(todo) for todo in todos]


main.py
-----------
from fastapi import FastAPI,APIRouter,HTTPException
from configuration import collection
from database.schema import all_tasks
from database.model import Todo
from bson.objectID import ObjectId
from datetime import datetime

app=FastAPI()
router=APIRouter()

@router.get("/")
async def get_all _todos():
    data=collection.find()
    return all_tasks(data)

@router.post("/create_tasks")
def create_task(new_task:Todo):
    try:
        resp=collection.insert_one(dist(new_task))
        return ("status_code":200,"id":str(resp.inserted_id))
    except Exception as e:
        return HTTPException("status_code":500,details=f"Some error ocurred{e}")
@router.put("/{task_id}")
async def update_task(task_id:str,updated_task:Todo):
    try:
        id=ObjectId(task_id)
        existing_doc=collection.find({"_id":id,"is_deleted":false})
        if not existing_doc:
            return HTTPException(status_code=500,default="Task does not exisis")
        updated_task.updated_at:datetime.timestamp(datetime.now())
        resp=collection.update_one({"_id":id},{$set:dict(updated_task)})
        return {"status_code":200,"message":"Task Updated successfully"}
    except Exception as e:
        return HTTPException(status_code=500,default=f"Some error occured {e}") 
@router.delete("/{task_id}")
async def deleted_task(task_id:str):
     try:
        id=ObjectId(task_id)
        existing_doc=collection.find({"_id":id,"is_deleted":false})
        if not existing_doc:
            return HTTPException(status_code=500,default="Task does not exisis")
        updated_task.updated_at:datetime.timestamp(datetime.now())
        resp=collection.update_one({"_id":id},{$set:{"is_deleted":true}})
        return {"status_code":200,"message":"Task Updated successfully"}
    except Exception as e:
        return HTTPException(status_code=500,default=f"Some error occured {e}") 
app.include_router(router)


