WHAT IS ECMAScript?
ECMAScript (often abbreviated as ES) is a scripting language specification developed by Ecma International. It serves as the standard for several scripting languages, 
including JavaScript, JScript, and ActionScript

WHAT IS JAVASCRIPT?
JavaScript is a versatile and widely-used programming language primarily known for its ability to create dynamic and interactive content on the web. It is a high-level, interpreted language
that allows developers to add functionality to web pages, create web applications, and build server-side applications.
GOOGLE SEARCH ENGINE-V8
FIREFOX SEARCH ENGINE-SPIDERMONKEY

JAVASCRIPT-var,let,const,date,func
ECMAScipt (Beyond)-setTimeout,Read file

WHAT IS NODEJS?
Node.js is an open-source, server-side runtime environment built on the JavaScript V8 engine. It allows developers to run JavaScript code on the server, enabling them to build scalable and efficient
network applications. (it is slow)

Google uses V8 and for web application we need js(meant for browser) so we pull out v8 engine and added extra features and take js to create a runtime(something that can run or compile js) and here where Nodejs came into picture.

WHAT IS BUN?
Bun is a new JavaScript runtime built from scratch to serve the modern JavaScript ecosystem.(It is faster) It has three major design goals:

Speed-> Bun starts fast and runs fast. It extends JavaScriptCore, the performance-minded JS engine built for Safari. As computing moves to the edge, this is critical.
Elegant-> APIs. Bun provides a minimal set of highly-optimimized APIs for performing common tasks, like starting an HTTP server and writing files.
Cohesive ->DX. Bun is a complete toolkit for building JavaScript apps, including a package manager, test runner, and bundler.

WHAT NODEJs WILL DO?
->CREATE CLIS(command line interface)
->CREATE VIDEO PLAYER
->CREATE GAME
->CREATE HTTP Server (imp we will work on it)


What is HTTP PROTOCOL?
->A protocol that defines the machine to communicate 
->Specially with websites,it the most common way for your website frontend to talk to your website backend.

For example:-when in google.com we do any sort of search, it sends the request to the data centre and then the data send the required data to your browser
Frontend talk to Backend through routers/wires

WHAT IS HTTP SERVER?
->some code that follows http protocol and helps to communicate with the clients(browser/mobile apps)

In the end client throwing some information  to the server, server doing something with that information and responding back the final result.
Similar to functions->through some parameters taking the values ,performing some manipulatopns and returning a result
server is taking the input from the client on the interne, doings some work (like authentication like whther the user is currentlu using gpt) then prviding the results

HTTP(Client Side)
1.Protocol(HTTP/HTTPS)
2.Adress(IP Port)
3.Route
4.Headers Body QueryParams
5.Method

(HTTP )SERVER
----------------
1.Response Header
2.Response Body
3.Status Codes


CLIENT
---------
https://chat.openai.com/backend-api/conversation/
-------   -------------  ------------------------  
  |            |                 |
protocol      URL              Route

Route--basically gpt can do make things like creating a new converstion, giving responses. So route specifies what to be performed
Header-cookie-123@5679@iuw854w
Body-What is 2+2 ?(Usually in json)
METHOD:POST(give request to the sender(server))
GET request:to fetch the data from the sender


                                                request
client-----------------------------------------------------------------------------------------------------------------------------> sender
 client   <-----------------------------------------------------------------------------------------------------------------------------  Sender
                                                        response

SERVER
--------
Response Header: contains the cookiee after the login
Response Body: 2+2 is equal to 4
Status Code-200
Things that happen in your browser after u fire this request
1.Browser parses the URL    (When you enter a URL into your browser and press Enter, the browser goes through a series of steps to parse and process the URL.)
2.Does a DNS Lookup (converts google.com to an IP)
3.Establishes a connection to the IP (handshake)

NOTE:
DNS (Domain Name System) resolution is the process by which domain names are translated into IP addresses. In simple terms, when you type a domain name (like www.example.com) into your web browser, the DNS resolution process is what allows your computer to find the corresponding IP address associated with that domain name.

﻿What is DNS resolution
URLs are just like contacts in your phone
In the end, they map to an IP
If you ever buy a URL of your own, you will need to point it to the IP of your server


﻿Things that happen on your server after the request is received
1. You get the inputs (route, body, headers)
2. You do some logic on the input, calculate the output 
3. You return the output body, headers and status code


TYPES OF REQUEST::

GET:
----
The GET method is used to request data from a specified resource. It only retrieves data and does not modify the server state. Parameters are included in the URL.
eg::Trying to the chatgpt history
POST:
-----
The POST method is used to submit data to be processed to a specified resource. It's often used when uploading a file or submitting a form. Data is sent in the request body.
eg:starting a new conversation
PUT:
-----
The PUT method is used to update a resource on the server. It either creates a new resource or replaces an existing one at the specified URI.
eg: going to the settings of the gpt and changing some setting
DELETE:
--------
The DELETE method is used to request that a resource be removed or deleted at the specified URI.

STATUS code::
----------------
200-EVERYTHING OK
404-PAGE/ROUTE NOT FOUND
403-AUTHENTICATION ISSUES
500-INTERNAL SERVER ERROR
-----------------------------------------------------------------------------------------
Express Js ->library we use to create a HTTP Server

Create a folder ->index.js
>>npm init -y
>>npm i express (to bring express from internet to  ur machine)

const express=require('express');
const app=express();   //function we cal and return back an object
app.get('/',function (req,res){
    //db call
    res.send('Hello world')
})
app.listen(port);

>>node index.js

--------------------------------------------
console.log("Req reached")
for(i=0;i<100000000;i++){
    a=a+1;
}
res.send('Hello world')

NOTE:: first js will solve the for loop and then will move to db call...but usually db call takes more time

WHAT is DIFFERENCE BETWEEN FS AND EXPRESS
    Both are separate lib
->fS is the file system (fs does not give get call)
->Express gives get call

Difference between public and private IPs?
Public IP Address: A public IP address is an address that is assigned to a device or a network and is accessible over the public internet. It uniquely identifies a device on the internet.
Private IP Address: A private IP address is used within a private network and is not directly accessible from the internet. Devices within a local network use private IP addresses to communicate with each other.NAT is commonly used within private networks to allow multiple devices to share a single public IP address for internet access.

Eg: our router has a Public IP.Suppose in our house there are many computers connected to the router so our computer will have private IP.

REST API:
Statelessness: Each request from a client to a server contains all the information needed to understand and process the request. The server doesn't store any information about the client's state between requests. This enhances scalability and simplifies server design.


NOTE:: Suppose in ur private IP of ur laptop, ur ph and laptop are connected to the same wifi then u write ur laptop private ip on ur ph it will show "Hello Worls"
----------------------------------------------
Suppose website it www.apdex-100.com
in terminal the IP of the website 123.6553.878  , Now in chrome when u type this IP the website we cannot see why??

Benefit of domain name--
the server has an IP now when we search through the domain name it refers to the IP and the server checks the header who is the referrer.
Suppose the vercel/terminal is a single server (Load Balancer) and two people having same IP tries to access so the server will check from whom the request came and then according to that it sends the result.But if we try to access directly through IP then the server gets confused.
(as a server can host multiple applications but multiple domains can point to the same server).

1.Virtual Hosting:
Many web servers host multiple websites on the same IP address using a feature called virtual hosting

2.SSL/TLS Certificates:
If the website uses HTTPS (SSL/TLS), the SSL certificate is associated with a domain name. Browsers expect the domain to match the certificate. When accessing the site by IP, this check may fail, leading to security warnings or the browser refusing to load the page.

NOTE:: express does not handle body ..SO lib that handles the body of the request is parser.
app.use(bodyParser.json()); //converts into json and passes it
app.get('/',function (req,res){
  console.log(req.body);
})

>>npx nodemon index.js...so whenever u change the file and save it automatically restarts the server



-----------------------------------------------------------------------EXPRESS ------------------------------------------------------------------------------
Explanation:: Doctors have a skill
They have acquired that skill over years
They provide service to other people who want to use their skill

To expose this skill, they open a clinic.People who want to use their skill line up in a waiting room. One by one the doctor meets them.The doc is single threaded.

const express = require("express")
function calculateSum(n) {
 let ans = 0;
 for (let i = 1; i&lt;=n; i++) { 
    ans = ans + i;
 }
 return ans;
}
const app = express();
app.get('/', function(req, res) { 
    const n = req.query.n;    //localhost:3000/?n=100
    const ans = calculateSum(n)

res.send(ans);
})

app.listen(3000);

QS>>>You need to create  4 routes ($ thing that the hospital can do)
1.GET-User can check how many kidneys they have and their health
2.POST-User can add a new kidney
3.PUT-User can replace a kidney,make it healthy
4.DELETE-User can remove a kidney



FOR 2 Explanation:


IN POSTMAN:
------------
POST |URL:https;//localhost:3000/|
BODY: (raw)
{
    "isHealthy":true
}

CODE:
-------
app.use(express.json());//as req.body cannot be accesed
app.post('/',function(req,res){
        const isHealthy=req.body.isHealthy;
        users[0].kidneys.push({
            healthy:isHealthy,
  })
res.json({
    msg:"Done!"
 }) 
})

When u restart the process the post data gets lost thats why we need database.



--------------------------------------------MIDDLEWARES---------------------------------------------------------------------------------------------------------
MiddleWares are used to do pre-checks
They are of two types:
1.Authentication
2.Input Validation

app.get('/',function1(req,res,next){},function2(req,res,next){},and so on)

now if in function1 anything goes wrong it will not go to the next function....so we use next parameter that if everything goes right it can move to the
next() that is the next function

middleware: using the body parameter in post we need to write 
app.use(express.json()) itself returns a function
in body only we do--as we donot know what will be the body it can be HTML,Json,Text... so we give responsibility that middleware u handle it.

---ERROR HANDLING MIDDLEWARES---
Global Catch middleware exception and takes 4 arguments 
(Note write this at last to be executed)
app.use(function(err,req,res,next){
  res.json({
      msg;"Srry something is up with your server"
  })
})

Authentication and Input Validation eg:: through middlewares
------------------------------------------------------------
function userMiddleware(req,res,next){
    if(username!="harkirat" &&password!="pass"){
          res.status(403).json({
              msg:""
          })
    }else{
          next();
    }
}

function inputMiddleware(req,res,next){
    if(kidneyId!=1 &&kidneyId!=2){
          res.status(403).json({
              msg:""
          })
    }else{
          next();
    }
}
app.get('/',userMiddleware,inputMiddleware,function(req,res){
  //do something
  res.send("Your heart is fine");
})
