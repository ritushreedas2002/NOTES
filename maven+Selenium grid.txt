1.
maven project 

1. packaging
2. dependency
3. project structure
4. plugins


pom.xml
==========

plugins-> configuration
dependencies->downloading 3rd party libraries

maven remote repo ------------------->maven local repo (through internet connection)

Maven build Life Cyccle
===============================

VAlidate
Compile
Test
Package
Integration Test
Verify
Install -install in local repo
Deploy - Intsall in remote rep's to use by other projects


how to execute
right click on the project -> run as -> maven build or maven clean 

in maven build in goal -> compile or clean to achieve the goal

Maven-resources-plugin

MAven install-> it will create a whole jar file of your project where it will 
do the following steps of validate, compile,test,package,verify, then finally installed


to execute only test -> maven test or in maven build enter clean as goal


TO run all the test cases
maven surefire plugin

<build>
    <plugins>
        <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <version>3.2.5</version> <!-- Use latest stable -->
            <configuration>
                <suiteXmlFiles>
                    <suiteXmlFile>testng.xml</suiteXmlFile>
                </suiteXmlFiles>
            </configuration>
        </plugin>
    </plugins>
</build>


================================================================================================


MVN CLI
==========


first in command propmt move to teh project folder


mvn validate
mvn clean
mvn compile
mvn test
mvn package
mvn install


1️⃣ mvn validate
Checks your project’s structure and configuration.

Makes sure pom.xml is valid, all required info (dependencies, plugins, groupId, artifactId, etc.) is there.

No compilation yet — just a sanity check.

Think of it as "Is everything in place before I start building?".

2️⃣ mvn clean
Deletes the target/ directory where Maven puts compiled code, packaged JARs, reports, etc.

Ensures the next build starts fresh with no leftovers from previous builds.

Useful to avoid “it works on my machine” old-file problems.

3️⃣ mvn compile
Compiles your project’s main source code (from src/main/java).

Doesn’t run tests — only compiles the code so it’s ready.

4️⃣ mvn test
Compiles and runs unit tests (from src/test/java).

Uses Maven Surefire Plugin to execute tests.

Doesn’t package anything — just checks if your code passes all tests.

5️⃣ mvn package
Compiles code, runs tests, and packages your project into its distributable format (like .jar or .war).

For example:

Java library → JAR file in target/

Web app → WAR file in target/

6️⃣ mvn install
Everything in package plus installs the package into your local Maven repository (~/.m2/repository).

This makes the project available as a dependency for other Maven projects on your machine.



mvn deploy
➡ validate → compile → test → package → install → deploy to remote repo


Runs everything up to install:
validate
compile
test
package
install

Plus: uploads (deploys) your packaged artifact (JAR/WAR) to a remote repository (e.g., Nexus, Artifactory, or a Maven Central mirror).

Used when you want to share your build with other developers or systems that don’t have your local repo.


















SELENIUM GRID
========================================================================================================================================================================

             +-------------------+
             |   Selenium Hub     |
             |-------------------|
             | Listens for tests  |
             | Distributes tests  |
             +---------+---------+
                       |
       ---------------------------------
       |                               |
+------+-------+               +-------+------+
|   Node 1     |               |   Node 2     |
|--------------|               |--------------|
| OS: Windows  |               | OS: Linux    |
| Browser:     |               | Browser:     |
| Chrome, Edge |               | Firefox      |
+--------------+               +--------------+

Explanation:

Hub: Central point where you send your test scripts.

Nodes: Machines (physical/virtual) where the browsers are installed and tests run.

You can have multiple nodes with different OS and browsers.

NOTE ::: ONCE ATTACHED ALL THE NODES TO THE HUB , hUB CAN RECOGNISE ALL THE NODES WITH THE BROWSER SETUP

Example:
My test case has browser chrome and the os : mac , so as my hub have all the nodes , so the test case runs in that node having os: mac and the browser : chrome


StandAlone Grid Setup
========================

Single system as a hub as welll as the node

Distributed Grid Setup
============================
Where multiple system as nodes and another system as a hub



Steps to follow standalone setup
===================================
1. download the selenium-server jar
2. in that go the cmd
java -jar selenium-server-4.15.0.jar standalone
3. open https://localhost:4444
