React Query is a powerful library for managing server state in React applications. It simplifies data fetching, caching, synchronizing, and updating the data in your UI without the need for complex state management libraries.

Why Use React Query?
1.Simplifies Data Fetching: Provides hooks for data fetching, which simplify the process and reduce boilerplate code.
2.Caching: Automatically caches data to reduce the number of network requests and improve performance.
3.Synchronizing: Keeps the data in sync with the server, making sure the UI reflects the latest state.
4.Automatic Refetching: Automatically refetches data in the background or on focus/window refocus to keep data fresh.
5.Error Handling: Provides built-in mechanisms to handle errors during data fetching.
6.Pagination and Infinite Queries: Makes handling pagination and infinite scroll easier.

npm install @tanstack/react-query

// index.js or App.js
import React from 'react';
import ReactDOM from 'react-dom';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import App from './App';

const queryClient = new QueryClient();

ReactDOM.render(
  <QueryClientProvider client={queryClient}>
    <App />
  </QueryClientProvider>,
  document.getElementById('root')
);


// App.js
import React from 'react';
import { useQuery } from '@tanstack/react-query';

const fetchPosts = async () => {
  const res = await fetch('https://jsonplaceholder.typicode.com/posts');
  if (!res.ok) {
    throw new Error('Network response was not ok');
  }
  return res.json();
};

const App = () => {
  const { data, error, isLoading, isError } = useQuery('posts', fetchPosts); //each useQuery contains keys and a callback function that return promises

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (isError) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div>
      <h1>Posts</h1>
      <ul>
        {data.map(post => (
          <li key={post.id}>{post.title}</li>
        ))}
      </ul>
    </div>
  );
};

export default App;


CACHE QUERY
-----------
By default, React Query caches the results of all queries for 5 minutes.

now to give the amount of time i want to cache my api calls

 const { data, error, isLoading, isError } = useQuery('posts', fetchPosts, {cacheTime:5000});
