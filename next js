
src--->App directory--------------->backend(named API directory)
             |
             --------------->frontend

(outside) of app directory we can have our models and helpers
app directory--->Layout.tsx..it is mostly like a wrapper where is used to render common components like navbar etc

Routing
-----------

(/Login)
---app
    ---Login
        ----Page.tsx


in backend
-------------

-----api
    ----Users
        ------Login(/api/users/Login)
            ----route.ts
        -------Signup(/api/users/signup)
            ----route.ts

Connection(create a folder inside src(no naming convention))
----Dbconfig
      ----dbconfig.ts


---------server component and client Component--------------
Disadvantage of react js application
(Waterfalling issue---on first render a white page comes then on second render the static data present in ur components renders and then the dynamic data comes)
To overcome this issue if we directly render the component from the server side then only in one render the screen appears. The point to be noted that: in server componet only server side rendering is done like fetch call and so on.

In client side component, the frontend part or the client side rendering i sperformed like using useState, useEffect and so on.
how to make a component client side
"use client"


-------------App Router and axios-------------
for sigup page
-----------------
import {useRouter} from "next/navigation";
import {axios} from "axios";


const Signup=()=>{
  const [user,setuser]=React.useState({
      email:"",
      username:""
  })
return(
  <div>
    <input 
      id="username" type="text" value={user.username} onChange={(e)=>setuser({...user,username:e.target.value})}/>\
    <Link href="/login">Pls login</Link>
  </div>
)
}

-------------dynamic routing--------------
/profile/:id
>profile
  >[id]
     >page.tsx


        const profile=({params}:any)=>{  //any type of data type
            return (
              <div>{params.id}</div>
            )
        }


--------------------------------
backend logic of signin and sigup
-------------------------------------

user(frontend) [calls]-->api with its info-->a token is generated with the expiry date ---->send the token to ----> database
                                                                                              |
                                                                                              ------------>user

Verification
----------------
Again the user sends the token to the api(as a url or the body)-->it finds the token from the db and takes all the related user information and show it to the user.


Code::::
/app/users/signup is handling the GET,POST,PUT and DELETE request;

----signup
    ----route.ts

    //while importing we sometimes need to specify the .ts if error throws
    import {connect} from "@/dbConfig/dbConfig";
    import User from "@/models/userModel";
    import { NextRequest, NextResponse } from "next/server";
    import bcryptjs from "bcryptjs";
    import { sendEmail } from "@/helpers/mailer";


    connect()//connection with db after creating the model in the models folder


  export async function POST(request: NextRequest){
    try {
        const reqBody = await request.json()
        const {username, email, password} = reqBody

        console.log(reqBody);

        //check if user already exists
        const user = await User.findOne({email})

        if(user){
            return NextResponse.json({error: "User already exists"}, {status: 400})
        }

        //hash password
        const salt = await bcryptjs.genSalt(10)
        const hashedPassword = await bcryptjs.hash(password, salt)

        const newUser = new User({
            username,
            email,
            password: hashedPassword
        })

        const savedUser = await newUser.save()
        console.log(savedUser);

        //send verification email

        await sendEmail({email, emailType: "VERIFY", userId: savedUser._id})

        return NextResponse.json({
            message: "User created successfully",
            success: true,
            savedUser
        })
        
        


    } catch (error: any) {
        return NextResponse.json({error: error.message}, {status: 500})

    }
}


In signUP--page.ts (for navigation)
---------------------------------------
  import {useRouter} from "next/navigation";
  axios.post("/api/users/signup",user);
  router.push("/login");
  

In --api--users--Login--route.ts
-------------------------

First it takes the login details and checks whether the user is present or not.If present then a token data is created with user details
      const token = await jwt.sign(tokenData, process.env.TOKEN_SECRET!, {expiresIn: "1d"})

        const response = NextResponse.json({
            message: "Login successful",
            success: true,
        })
        response.cookies.set("token", token, {
            httpOnly: true, 
            
        })
        return response;
=============================================




----------------FORGOT PASSWORD LOGIC------------------------------

In backend inside the user schema these are the properties set:
forgotPasswordToken:String,
forgotPasswordTokenExpiry:Date,
verifyToken:String,
verifyTokenExpiry:Date,

LOGIC::
                        (sends the copy)
Database<------------------Our app----------------->User

SO basically when a user clicks on Forget Password our application generates a verifyToken and verifyTokenExpiry and sends the copy to the database and the user.In the user
side the token is send via "link" through mail.
Now when the user verifies or opens the token for verification then our application again gets the token back and then now our application will send a query to the database
that whether a similar token is present in our database or not and is the token verified before the tokenExpiry time.If "YES" then user is verified, then password feild is updated
with the password entered by the user.

initially in react what we did--
const user=mongoose.model("User",UserSchema);
module.exports={user};

BUT NEXTJS is a edge time application so it will not know that whether it is  first time so model needs to be created or not.So what we do is if model is already present
the provide their reference or create a new model
const User=mongoose.models.user||mongoose.model("User",UserSchema);
export default User;

****NOTE****
 Bcrypt is a hashing algorithm to create hashes for passwords to store them in case of a data breach. This advanced hashing algorithm uses salts, making 
it hard to crack by attacks such as brute-forcing.


